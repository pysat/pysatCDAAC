# -*- coding: utf-8 -*-
# Full author list can be found in .zenodo.json file
# DOI:10.5281/zenodo.3475493
#
# Review Status for Classified or Controlled Information by NRL
# -------------------------------------------------------------
# DISTRIBUTION STATEMENT A: Approved for public release. Distribution is
# unlimited.
# ----------------------------------------------------------------------------
"""Unit and Integration Tests for each instrument module.

Note
----
Imports test methods from pysat.tests.instrument_test_class

"""

import numpy as np
import pytest

# Make sure to import your instrument library here
import pysatCDAAC

# Import the test classes from pysat
from pysat.tests.classes import cls_instrument_library as clslib

# Retrieve the lists of CDAAC instruments and testing methods
instruments = clslib.InstLibTests.initialize_test_package(
    clslib.InstLibTests, inst_loc=pysatCDAAC.instruments)

# Build a custom list of gps instruments.  These require custom binning tests
# that are not used for the in situ instruments.
instruments['gps'] = []
for inst in instruments['download']:
    if 'gps' in inst['inst_module'].name:
        instruments['gps'].append(inst)


class TestInstruments(clslib.InstLibTests):
    """Main class for instrument tests.

    Note
    ----
    All standard tests, setup, and teardown inherited from the core pysat
    instrument test class.

    """

    @pytest.mark.second
    @pytest.mark.parametrize("inst_dict", instruments['gps'])
    @pytest.mark.parametrize("bin_num", [100, 200])
    def test_altitude_bin_keyword(self, inst_dict, bin_num):
        """Test altitude binning keywords.

        Parameters
        ----------
        inst_dict : dict
            Dictionary of instrument properties generated by pysat.
        bin_num : int
            Number of bins for altitude profiling.

        """

        if inst_dict['tag'] in ['scnlv1', 'podtec', 'ionphs']:
            pytest.skip("Binning not available for level-1 data")
            return

        inst_dict['kwargs'] = {'altitude_bin': 5., 'altitude_bin_num': bin_num}
        self.test_inst, date = clslib.initialize_test_inst_and_date(inst_dict)
        self.test_inst.load(date=date)

        # Confirm presence of binned altitudes.
        assert 'MSL_bin_alt' in self.test_inst.data

        # Confirm binned altitudes are even factors of binning.
        rem = np.remainder(self.test_inst['MSL_bin_alt'].values, 5)
        idx, idy, = np.where(rem == 0)
        idx2, idy2, = np.where(np.isnan(rem))
        assert len(idx) + len(idx2) == np.prod(rem.shape)

        # Confirm length of each profile corresponds to bin_num
        assert self.test_inst.data.sizes['RO'] == bin_num

        return
